{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red37\green37\blue37;\red237\green237\blue237;
\red48\green61\blue72;\red38\green38\blue38;\red242\green242\blue242;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c0\c0;\cssrgb\c19216\c19216\c19216;\cssrgb\c94510\c94510\c94510;
\cssrgb\c24314\c30588\c35294;\cssrgb\c20000\c20000\c20000;\cssrgb\c96078\c96078\c96078;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww15120\viewh19480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Show all databases\
	show dbs\
\
Show current database\
	db\
\
Change to another/Create a database\
	use <db_name>\
\
Delete database\
	db.dropDatabase() (will delete the current database in use)\
\
\

\fs36 \cf2 COLLETIONS
\fs24 \cf0 \
View all collections\
	show collections\
\
Create a new collection\
	
\f1 \cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 db.createCollection(name, options)
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
	db.createCollection(<collection_name>)\
\
Destroy a collection\
	db.<collection_name>.drop()\
\
\

\fs36 \cf2 CRUD OPERATIONS\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f2\b\fs32 \cf5 \expnd0\expndtw0\kerning0
CREATE - Inserting a document into a collection:\
\pard\pardeftab720\sl340\partightenfactor0

\f3\b0\fs24 \cf6 \cb7 // Pattern:\
db.COLLECTION_NAME.insert(\{YOUR_JSON_DOCUMENT\})  \
 \
// Example:\
db.ninjas.insert(\{name: "Trey", belt: "black", status: "awesome"\})\
\
\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f2\b\fs32 \cf5 \cb1 READ - Retrieving documents from a collection:\
\pard\pardeftab720\sl340\partightenfactor0

\f3\b0\fs24 \cf6 \cb7 // Pattern: \
db.COLLECTION_NAME.find(\{YOUR_QUERY_DOCUMENT\})\
\
// Example:\
db.ninjas.find(\{name: "Trey"\})\
\
\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f2\b\fs32 \cf5 \cb1 DESTROY - Removing documents from a collection:\
\pard\pardeftab720\sl340\partightenfactor0

\f3\b0\fs24 \cf6 \cb7 // Pattern:\
db.COLLECTION_NAME.remove(\{YOUR_QUERY_DOCUMENT\}, BOOLEAN)\
\
// Example\
db.ninjas.remove(\{belt: "yellow"\})\
db.ninjas.remove(\{belt: "yellow"\}, false) // this query would have the same effect as the one above.\
\
\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f2\b\fs32 \cf5 \cb1 UPDATE - Updating documents in a collection:\
\pard\pardeftab720\sl340\partightenfactor0

\f3\b0\fs24 \cf6 \cb7 // Example: (this will delete the current document\'92s content and replace it with what\'92s below)\
db.ninjas.update(\{name: "Trey"\}, \{location: "Mountain View"\})\
\
// Example:\
db.ninjas.find(\{location: "Mountain View"\}).pretty() \
\
\
// Pattern: (this will only add/update the info entered \cf2 USE IT INSTEAD OF THE ONE ABOVE\cf6 )\
db.COLLECTION_NAME.update(\{QUERY\}, \{FIELDS_TO_UPDATE\}, \{OPTIONS\})  \
// Note: the options document is optional\
\
// Example:\
db.ninjas.update(\{name: "Trey"\}, \cf2 \{$set:\cf6  \{location: "Mountain View"\}\cf2 \}\cf6 )\
\
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\f2\b\fs48 \cf5 \cb1 Operators\
\pard\pardeftab720\sl280\partightenfactor0

\b0\fs28 \cf8 $gt (greater than) - Use to query selectively on numerical-valued fields\
EX: 
\f3\fs24 \cf6 \cb7 db.dojos.find(\{number_of_students: \{$gt: 15\}\})
\f2\fs28 \cf8 \cb1 \
\
$gte (greater than or equal to) - Use to query selectively on numerical-valued fields\
\
$lt (less than) - Use to query selectively on numerical-valued fields\
\
$lte (less than or equal to) - Use to query selectively on numerical-valued fields\
\
$in (in array) - Use to find documents who have a particular value within an array.
\fs24 \
\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\b\fs32 \cf5 Operators with arrays\
\pard\pardeftab720\sl340\partightenfactor0

\f3\b0\fs24 \cf6 \cb7 $push - Push to an array contained within a document.\
\
$pop	- Removes either the first or last element from an array. \
	EX: db.COLLECTION.update(\{QUERY\}, \{$pop: \{array_key: (1 or -1)\}\})\
  \
	Use 1 for the last item in the array, -1 for the first item.\
\
$addToSet - It functions just like $push.  However, $addToSet only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).\
\
$pull - Removes a specified value from an array, unlike $pop, which removes by location. \
	Ex: db.COLLECTION.update(\{QUERY\}, \{$pull: \{array_key: VALUE\}\})\
  \
	This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.
\f2\b\fs48 \cf5 \cb1 \
\
}